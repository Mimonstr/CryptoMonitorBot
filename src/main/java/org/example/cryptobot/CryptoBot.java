package org.example.cryptobot;

import com.google.gson.Gson;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.Date;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;

public class CryptoBot extends TelegramLongPollingBot
{
    // –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
    private enum InputAction
    {
        ADD, REMOVE, PRICE
    }

    private static final String NOTIFICATION_FINISH = "finish_notifications";
    private static final String NOTIFICATION_COMMAND = "notifications";
    private static final String NOTIFICATION_SETTING_PREFIX = "notify:";
    private static final String NOTIFICATION_INTERVAL_PREFIX = "interval:";
    private static final String NOTIFICATION_CANCEL = "cancel_notifications";
    private static final String REMOVE_NOTIFICATION_PREFIX = "remove_notification:";
    private static final String REMOVE_NOTIFICATION_BUTTON = "‚ùå –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ";

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ –º–∏–Ω—É—Ç–∞—Ö)
    private static final Map<String, Integer> NOTIFICATION_INTERVALS = new HashMap<>();

    static
    {
        NOTIFICATION_INTERVALS.put("30m", 30);
        NOTIFICATION_INTERVALS.put("2h", 120);
        NOTIFICATION_INTERVALS.put("6h", 360);
        NOTIFICATION_INTERVALS.put("12h", 720);
        NOTIFICATION_INTERVALS.put("24h", 1440);
    }

    private static final String CUSTOM_INTERVAL_COMMAND = "custom_interval";
    private static final String WAITING_FOR_CUSTOM_INTERVAL = "waiting_for_custom_interval";
    private static final int MIN_NOTIFICATION_INTERVAL = 5; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö

    // –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    private final Map<Long, String> notificationSettings = new HashMap<>();


    // –í –Ω–∞—á–∞–ª–æ –∫–ª–∞—Å—Å–∞
    private static final String CURRENCY_PREFIX = "currency:";
    private static final String REMOVE_CURRENCY_PREFIX = "remove_currency:";
    private static final String PRICE_CURRENCY_PREFIX = "price_currency:";
    private static final String DONE_COMMAND = "done";
    private static final String REMOVE_DONE_COMMAND = "remove_done";
    private static final String PRICE_DONE_COMMAND = "price_done";
    private static final String MANUAL_COMMAND = "manual";
    private static final String PRICE_MANUAL_COMMAND = "price_manual";

    // –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç
    private static final List<String> POPULAR_CURRENCIES = Arrays.asList(
            "BTC", "ETH", "XRP", "LTC", "ADA", "DOGE", "SOL", "DOT", "SHIB", "MATIC",
            "AVAX", "BNB", "LINK", "UNI", "XMR"
    );

    // –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    private final Map<Long, String> userStates = new HashMap<>();
    private final DatabaseHelper dbHelper = new DatabaseHelper();
    private final CryptoApiService apiService = new CryptoApiService();
    // –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç –≤–æ –≤—Ä–µ–º—è –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä–∞
    private final Map<Long, Set<String>> selectedCurrencies = new HashMap<>();
    // –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç –≤–æ –≤—Ä–µ–º—è –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    private final Map<Long, Set<String>> removalSelectedCurrencies = new HashMap<>();
    // –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç –≤–æ –≤—Ä–µ–º—è –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–∞
    private final Map<Long, Set<String>> priceSelectedCurrencies = new HashMap<>();
    public static final Logger logger = LoggerFactory.getLogger(CryptoBot.class);

    public CryptoBot()
    {
        dbHelper.initDatabase();
        startNotificationScheduler();
    }

    private void startNotificationScheduler()
    {
        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
        scheduler.scheduleAtFixedRate(() ->
        {
            try
            {
                checkNotifications();
            }
            catch (Exception e)
            {
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", e);
            }
        }, 5, 5, TimeUnit.MINUTES);
    }

    @Override
    public void onUpdateReceived(Update update)
    {
        if (update.hasCallbackQuery())
        {
            handleCallbackQuery(update);
        }
        else if (update.hasMessage() && update.getMessage().hasText())
        {
            handleTextMessage(update);
        }
    }

    private void sendMainMenu(long chatId)
    {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∑–∏
        InlineKeyboardButton addButton = new InlineKeyboardButton();
        addButton.setText("üÜï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É");
        addButton.setCallbackData("add");

        InlineKeyboardButton removeButton = new InlineKeyboardButton();
        removeButton.setText("‚ùå –£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É");
        removeButton.setCallbackData("remove");

        InlineKeyboardButton listButton = new InlineKeyboardButton();
        listButton.setText("üìã –°–ø–∏—Å–æ–∫");
        listButton.setCallbackData("list");

        InlineKeyboardButton priceButton = new InlineKeyboardButton();
        priceButton.setText("üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É—Ä—Å");
        priceButton.setCallbackData("price");

        InlineKeyboardButton notificationsButton = new InlineKeyboardButton();
        notificationsButton.setText("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
        notificationsButton.setCallbackData(NOTIFICATION_COMMAND);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–∏–∫)
        rows.add(Collections.singletonList(addButton));
        rows.add(Collections.singletonList(removeButton));
        rows.add(Collections.singletonList(listButton));
        rows.add(Collections.singletonList(priceButton));
        rows.add(Collections.singletonList(notificationsButton));

        markup.setKeyboard(rows);

        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞");
        message.setReplyMarkup(markup);
        try
        {
            execute(message);
        }
        catch (TelegramApiException e)
        {
            e.printStackTrace();
        }
    }

    private void handleMultiSelect(Update update, String prefix, Map<Long, Set<String>> storage, String messageText, Function<Long, InlineKeyboardMarkup> keyboardGenerator)
    {
        CallbackQuery callbackQuery = update.getCallbackQuery();
        long chatId = callbackQuery.getMessage().getChatId();
        long messageId = callbackQuery.getMessage().getMessageId();
        String data = callbackQuery.getData();

        String currency = data.substring(prefix.length());
        Set<String> selected = storage.get(chatId);
        if (selected == null)
        {
            selected = new HashSet<>();
            storage.put(chatId, selected);
        }

        if (selected.contains(currency))
        {
            selected.remove(currency);
        }
        else
        {
            selected.add(currency);
        }

        try
        {
            EditMessageText editMessage = new EditMessageText();
            editMessage.setChatId(String.valueOf(chatId));
            editMessage.setMessageId((int) messageId);
            editMessage.setText(messageText);
            editMessage.setReplyMarkup(keyboardGenerator.apply(chatId));
            execute(editMessage);
        }
        catch (TelegramApiException e)
        {
            e.printStackTrace();
        }
    }

    private void handleAddDone(long chatId, long messageId)
    {
        Set<String> currencies = selectedCurrencies.get(chatId);
        if (currencies == null || currencies.isEmpty())
        {
            sendConfirmation(chatId, messageId, "‚ö†Ô∏è –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è");
            return;
        }

        List<String> addedCurrencies = new ArrayList<>();
        List<String> alreadyExistCurrencies = new ArrayList<>();

        for (String currency : currencies)
        {
            if (!dbHelper.isCurrencyFavorite(chatId, currency))
            {
                dbHelper.addCurrency(chatId, currency);
                addedCurrencies.add(currency);
            }
            else
            {
                alreadyExistCurrencies.add(currency);
            }
        }

        sendMultiActionResponse(chatId, messageId, addedCurrencies, alreadyExistCurrencies,
                "‚úÖ –í–∞–ª—é—Ç–∞ %s —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!\n",
                "‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ %d –≤–∞–ª—é—Ç: %s\n",
                "‚ö†Ô∏è –í–∞–ª—é—Ç–∞ %s —É–∂–µ –±—ã–ª–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º\n",
                "‚ö†Ô∏è %d –≤–∞–ª—é—Ç —É–∂–µ –±—ã–ª–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º: %s\n",
                "‚ö†Ô∏è –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è");

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        sendMainMenu(chatId);
    }

    private void handleRemoveDone(long chatId, long messageId)
    {
        Set<String> currencies = removalSelectedCurrencies.get(chatId);
        if (currencies == null || currencies.isEmpty())
        {
            sendConfirmation(chatId, messageId, "‚ö†Ô∏è –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
            return;
        }

        List<String> removedCurrencies = new ArrayList<>();
        List<String> notExistCurrencies = new ArrayList<>();

        for (String currency : currencies)
        {
            if (dbHelper.isCurrencyFavorite(chatId, currency))
            {
                dbHelper.removeCurrency(chatId, currency);
                removedCurrencies.add(currency);
                // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                dbHelper.removeNotificationSetting(chatId, currency);
            }
            else
            {
                notExistCurrencies.add(currency);
            }
        }

        sendMultiActionResponse(chatId, messageId, removedCurrencies, notExistCurrencies,
                "‚ùå –í–∞–ª—é—Ç–∞ %s —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!\n",
                "‚ùå –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ %d –≤–∞–ª—é—Ç: %s\n",
                "‚ö†Ô∏è –í–∞–ª—é—Ç–∞ %s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º\n",
                "‚ö†Ô∏è %d –≤–∞–ª—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º: %s\n",
                "‚ö†Ô∏è –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        sendMainMenu(chatId);
    }

    private void handlePriceDone(long chatId, long messageId)
    {
        Set<String> currencies = priceSelectedCurrencies.get(chatId);
        if (currencies == null || currencies.isEmpty())
        {
            sendConfirmation(chatId, messageId, "‚ö†Ô∏è –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–∞");
            return;
        }

        StringBuilder message = new StringBuilder();
        for (String symbol : currencies)
        {
            try
            {
                double price = apiService.getPrice(symbol);
                message.append(symbol).append(": $").append(String.format("%.2f", price)).append("\n");
            }
            catch (Exception e)
            {
                message.append(symbol).append(": –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞\n");
            }
        }
        sendConfirmation(chatId, messageId, message.toString());
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        sendMainMenu(chatId);
    }

    // –û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å —É—Å–ø–µ—à–Ω—ã–º–∏ –∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    private void sendMultiActionResponse(long chatId, long messageId,
                                         List<String> successList, List<String> errorList,
                                         String singleSuccess, String multiSuccess,
                                         String singleError, String multiError,
                                         String noActionMessage)
    {
        StringBuilder message = new StringBuilder();

        if (!successList.isEmpty())
        {
            if (successList.size() == 1)
            {
                message.append(String.format(singleSuccess, successList.get(0)));
            }
            else
            {
                String currencyList = String.join(", ", successList);
                message.append(String.format(multiSuccess, successList.size(), currencyList));
            }
        }

        if (!errorList.isEmpty())
        {
            if (errorList.size() == 1)
            {
                message.append(String.format(singleError, errorList.get(0)));
            }
            else
            {
                String currencyList = String.join(", ", errorList);
                message.append(String.format(multiError, errorList.size(), currencyList));
            }
        }

        if (successList.isEmpty() && errorList.isEmpty())
        {
            message.append(noActionMessage);
        }

        sendConfirmation(chatId, messageId, message.toString());
    }

    private void handleCallbackQuery(Update update)
    {
        CallbackQuery callbackQuery = update.getCallbackQuery();
        long userId = callbackQuery.getFrom().getId();
        String data = callbackQuery.getData();
        long messageId = callbackQuery.getMessage().getMessageId();
        long chatId = callbackQuery.getMessage().getChatId();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        if (data.equals("add"))
        {
            sendAddKeyboard(chatId);
            return;
        }
        else if (data.equals("remove"))
        {
            sendRemoveKeyboard(chatId);
            return;
        }
        else if (data.equals("list"))
        {
            handleListCommand(chatId);
            return;
        }
        else if (data.equals("price"))
        {
            sendPriceKeyboard(chatId);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä–∞
        if (userStates.containsKey(chatId) && "waiting_for_multi_add".equals(userStates.get(chatId)))
        {
            if (data.equals(MANUAL_COMMAND))
            {
                userStates.put(userId, "waiting_for_manual_currency");
                sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC, ETH)");
                return;
            }
            else if (data.equals(DONE_COMMAND))
            {
                handleAddDone(chatId, messageId);
                userStates.remove(chatId);
                selectedCurrencies.remove(chatId);
                return;
            }
            else if (data.startsWith(CURRENCY_PREFIX))
            {
                handleMultiSelect(update, CURRENCY_PREFIX, selectedCurrencies,
                        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
                        this::generateCurrencyKeyboard);
                return;
            }
        }
        else if (userStates.containsKey(chatId) && "waiting_for_multi_remove".equals(userStates.get(chatId)))
        {
            if (data.equals(REMOVE_DONE_COMMAND))
            {
                handleRemoveDone(chatId, messageId);
                userStates.remove(chatId);
                removalSelectedCurrencies.remove(chatId);
                // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                for (String currency : removalSelectedCurrencies.get(chatId))
                {
                    dbHelper.removeNotificationSetting(chatId, currency);
                }
                return;
            }
            else if (data.startsWith(REMOVE_CURRENCY_PREFIX))
            {
                handleMultiSelect(update, REMOVE_CURRENCY_PREFIX, removalSelectedCurrencies,
                        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:",
                        chatId1 -> generateRemoveKeyboard(chatId1, dbHelper.getFavoriteCurrencies(chatId1)));
                return;
            }
        }
        else if (data.equals(PRICE_MANUAL_COMMAND))
        {
            userStates.put(chatId, "waiting_for_manual_price");
            sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–∞");
            return;
        }
        else if (data.equals(PRICE_DONE_COMMAND))
        {
            handlePriceDone(chatId, messageId);
            userStates.remove(chatId);
            priceSelectedCurrencies.remove(chatId);
            return;
        }
        else if (data.startsWith(PRICE_CURRENCY_PREFIX))
        {
            handleMultiSelect(update, PRICE_CURRENCY_PREFIX, priceSelectedCurrencies,
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–∞:",
                    this::generatePriceKeyboard);
            return;
        }
        //–û–±—Ä–∞–±–æ—Ç–∫–∞ –°–ø–∏—Å–∫–∞
        else if (data.startsWith("chart:"))
        {
            String currency = data.substring(6);
            chatId = callbackQuery.getMessage().getChatId();
            messageId = callbackQuery.getMessage().getMessageId();

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏ "Query is too old"
            AnswerCallbackQuery answer = new AnswerCallbackQuery();
            answer.setCallbackQueryId(callbackQuery.getId());
            answer.setText("–ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è " + currency + "...");
            answer.setShowAlert(false);

            try
            {
                execute(answer);
            }
            catch (TelegramApiException e)
            {
                e.printStackTrace();
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            sendCurrencyChart(chatId, currency);

            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        else if (data.equals(MANUAL_COMMAND))
        {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            String currentState = userStates.get(chatId);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
            if ("waiting_for_multi_remove".equals(currentState))
            {
                userStates.put(userId, "waiting_for_remove_manual");
                sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC, ETH)");
            }
            else if ("waiting_for_multi_price".equals(currentState))
            {
                userStates.put(userId, "waiting_for_manual_price");
                sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–∞");
            }
            else
            {
                // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                userStates.put(userId, "waiting_for_manual_currency");
                sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC, ETH)");
            }
            return;
        }
        else if (data.startsWith(CURRENCY_PREFIX))
        {
            String currency = data.substring(CURRENCY_PREFIX.length());
            try
            {
                if (apiService.isCurrencyValid(currency))
                {
                    dbHelper.addCurrency(chatId, currency);
                    sendConfirmation(chatId, messageId, "‚úÖ –í–∞–ª—é—Ç–∞ " + currency + " –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!");
                }
                else
                {
                    sendConfirmation(chatId, messageId, "‚ùå –í–∞–ª—é—Ç–∞ " + currency + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞.");
                }
            }
            catch (IOException e)
            {
                sendConfirmation(chatId, messageId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞–ª—é—Ç—ã: " + e.getMessage());
            }
            return;
        }
        else if (data.equals(NOTIFICATION_COMMAND))
        {
            sendNotificationMenu(chatId);
            return;
        }
        else if (data.startsWith(NOTIFICATION_SETTING_PREFIX))
        {
            String currency = data.substring(NOTIFICATION_SETTING_PREFIX.length());
            notificationSettings.put(chatId, currency);
            sendIntervalOptions(chatId);
            return;
        }
        else if (data.startsWith(NOTIFICATION_INTERVAL_PREFIX))
        {
            String intervalKey = data.substring(NOTIFICATION_INTERVAL_PREFIX.length());
            Integer minutes = NOTIFICATION_INTERVALS.get(intervalKey);

            if (minutes != null && notificationSettings.containsKey(chatId))
            {
                String currency = notificationSettings.get(chatId);
                dbHelper.addNotificationSetting(chatId, currency, minutes);

                sendConfirmation(chatId, messageId,
                        "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è " + currency +
                                " —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –∫–∞–∂–¥—ã–µ " + intervalKey);

                notificationSettings.remove(chatId);
                sendNotificationMenu(chatId);
            }
            return;
        }
        else if (data.equals(CUSTOM_INTERVAL_COMMAND))
        {
            String currency = notificationSettings.get(chatId);
            if (currency == null)
            {
                sendConfirmation(chatId, messageId, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞");
                return;
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
            userStates.put(chatId, WAITING_FOR_CUSTOM_INTERVAL);

            sendMessage(chatId,
                    "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è " + currency + " (–≤ –º–∏–Ω—É—Ç–∞—Ö):\n\n" +
                            "üîπ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n" +
                            "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: " + MIN_NOTIFICATION_INTERVAL + " –º–∏–Ω—É—Ç\n" +
                            "‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–æ 5\n" +
                            "‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: 5, 10, 15, 20, ...\n\n" +
                            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:");
            return;
        }
        else if (data.startsWith(REMOVE_NOTIFICATION_PREFIX))
        {
            String currency = data.substring(REMOVE_NOTIFICATION_PREFIX.length());

            if (!dbHelper.isNotificationExists(chatId, currency))
            {
                sendConfirmation(chatId, messageId,
                        "‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è " + currency + " –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
                sendNotificationMenu(chatId);
                return;
            }

            // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            dbHelper.removeNotificationSetting(chatId, currency);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            sendConfirmation(chatId, messageId,
                    "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è " + currency +
                            " —É–¥–∞–ª–µ–Ω—ã\n\n–¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –≤–∞–ª—é—Ç—ã");

            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            notificationSettings.remove(chatId);

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            sendNotificationMenu(chatId);
            return;
        }
        else if (data.equals(NOTIFICATION_FINISH))
        {
            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            notificationSettings.remove(chatId);

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            sendMainMenu(chatId);
            return;
        }
        else if (data.equals(NOTIFICATION_CANCEL))
        {
            notificationSettings.remove(chatId);
            sendNotificationMenu(chatId);
            return;
        }
    }

    private void sendNotificationMenu(long chatId)
    {
        List<DatabaseHelper.NotificationSetting> settings = dbHelper.getNotificationSettings(chatId);
        StringBuilder message = new StringBuilder("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n");

        if (settings.isEmpty())
        {
            message.append("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
        }
        else
        {
            message.append("–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n");
            for (DatabaseHelper.NotificationSetting setting : settings)
            {
                String interval = getIntervalDisplay(setting.getIntervalMinutes());
                message.append("‚Ä¢ ").append(setting.getCurrency())
                        .append(" - –∫–∞–∂–¥—ã–µ ").append(interval).append("\n");
            }
        }

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –°–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        List<String> favorites = dbHelper.getFavoriteCurrencies(chatId);
        if (!favorites.isEmpty())
        {
            List<InlineKeyboardButton> row = new ArrayList<>();
            for (String currency : favorites)
            {
                InlineKeyboardButton button = new InlineKeyboardButton();
                button.setText(currency);
                button.setCallbackData(NOTIFICATION_SETTING_PREFIX + currency);
                row.add(button);

                if (row.size() == 3)
                {
                    rows.add(row);
                    row = new ArrayList<>();
                }
            }
            if (!row.isEmpty()) rows.add(row);
        }
        else
        {
            message.append("\n\n–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞–ª—é—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ");
        }

        // –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫–æ–Ω—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É"
        InlineKeyboardButton finishButton = new InlineKeyboardButton();
        finishButton.setText("‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É");
        finishButton.setCallbackData(NOTIFICATION_FINISH);
        rows.add(Collections.singletonList(finishButton));

        markup.setKeyboard(rows);
        sendMessageWithMarkup(chatId, message.toString(), markup);
    }


    private void sendIntervalOptions(long chatId)
    {
        String currency = notificationSettings.get(chatId);

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –û–ø—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        for (String key : NOTIFICATION_INTERVALS.keySet())
        {
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(getIntervalDisplay(key));
            button.setCallbackData(NOTIFICATION_INTERVAL_PREFIX + key);
            rows.add(Collections.singletonList(button));
        }

        // –ù–æ–≤–∞—è –æ–ø—Ü–∏—è: —Å–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        InlineKeyboardButton customButton = new InlineKeyboardButton();
        customButton.setText("‚úèÔ∏è –°–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω)");
        customButton.setCallbackData(CUSTOM_INTERVAL_COMMAND);
        rows.add(Collections.singletonList(customButton));

        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        InlineKeyboardButton removeButton = new InlineKeyboardButton();
        removeButton.setText(REMOVE_NOTIFICATION_BUTTON);
        removeButton.setCallbackData(REMOVE_NOTIFICATION_PREFIX + currency);
        rows.add(Collections.singletonList(removeButton));

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("üîô –ù–∞–∑–∞–¥");
        backButton.setCallbackData(NOTIFICATION_CANCEL);
        rows.add(Collections.singletonList(backButton));

        markup.setKeyboard(rows);
        sendMessageWithMarkup(chatId,
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è " + currency + "\n" +
                        "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: " + MIN_NOTIFICATION_INTERVAL + " –º–∏–Ω—É—Ç\n" +
                        "–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∞—Ç–Ω—ã 5 –º–∏–Ω—É—Ç–∞–º",
                markup);
    }

    private String getIntervalDisplay(String key)
    {
        switch (key)
        {
            case "30m":
                return "30 –º–∏–Ω—É—Ç";
            case "2h":
                return "2 —á–∞—Å–∞";
            case "6h":
                return "6 —á–∞—Å–æ–≤";
            case "12h":
                return "12 —á–∞—Å–æ–≤";
            case "24h":
                return "1 –¥–µ–Ω—å";
            default:
                return key;
        }
    }

    private String getIntervalDisplay(int minutes)
    {
        if (minutes < 60) return minutes + " –º–∏–Ω—É—Ç";
        int hours = minutes / 60;
        return hours + (hours == 1 ? " —á–∞—Å" : " —á–∞—Å–æ–≤");
    }

    private void sendMessageWithMarkup(long chatId, String text, InlineKeyboardMarkup markup)
    {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setReplyMarkup(markup);
        try
        {
            execute(message);
        }
        catch (TelegramApiException e)
        {
            e.printStackTrace();
        }
    }

    private void sendMultiSelectKeyboard(long chatId, String state, Map<Long, Set<String>> storage,
                                         String messageText, Function<Long, InlineKeyboardMarkup> keyboardGenerator)
    {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        userStates.remove(chatId);
        storage.remove(chatId);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        userStates.put(chatId, state);
        storage.put(chatId, new HashSet<>());

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(messageText);
        message.setReplyMarkup(keyboardGenerator.apply(chatId));
        try
        {
            execute(message);
        }
        catch (TelegramApiException e)
        {
            e.printStackTrace();
        }
    }

    private void sendAddKeyboard(long chatId)
    {
        sendMultiSelectKeyboard(chatId, "waiting_for_multi_add", selectedCurrencies,
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
                this::generateCurrencyKeyboard);
    }

    private void sendPriceKeyboard(long chatId)
    {
        sendMultiSelectKeyboard(chatId, "waiting_for_multi_price", priceSelectedCurrencies,
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–∞:",
                this::generatePriceKeyboard);
    }

    private void sendRemoveKeyboard(long chatId)
    {
        List<String> favoriteCurrencies = dbHelper.getFavoriteCurrencies(chatId);

        // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –∏ –≤—ã—Ö–æ–¥–∏–º
        if (favoriteCurrencies.isEmpty())
        {
            sendMessage(chatId, "–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç –ø—É—Å—Ç");
            return;
        }

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        userStates.remove(chatId);
        removalSelectedCurrencies.remove(chatId);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        userStates.put(chatId, "waiting_for_multi_remove");
        removalSelectedCurrencies.put(chatId, new HashSet<>());

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:");
        message.setReplyMarkup(generateRemoveKeyboard(chatId, favoriteCurrencies));
        try
        {
            execute(message);
        }
        catch (TelegramApiException e)
        {
            e.printStackTrace();
        }
    }


    private void handleTextMessage(Update update)
    {
        String messageText = update.getMessage().getText();
        long chatId = update.getMessage().getChatId();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        if (userStates.containsKey(chatId))
        {
            String state = userStates.get(chatId);
            String currency = messageText.trim().toUpperCase();

            if ("waiting_for_manual_currency".equals(state))
            {
                handleManualInput(chatId, currency, InputAction.ADD);
                userStates.remove(chatId);
                return;
            }
            else if ("waiting_for_remove_manual".equals(state))
            {
                handleManualInput(chatId, currency, InputAction.REMOVE);
                userStates.remove(chatId);
                return;
            }
            else if ("waiting_for_manual_price".equals(state))
            {
                handleManualInput(chatId, currency, InputAction.PRICE);
                userStates.remove(chatId);
                return;
            }
            else if (WAITING_FOR_CUSTOM_INTERVAL.equals(userStates.get(chatId)))
            {
                handleCustomIntervalInput(chatId, messageText);
                return;
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if (messageText.equals("/start"))
        {
            sendMainMenu(chatId);
        }
        else if (messageText.equals("/add"))
        {
            sendAddKeyboard(chatId);
        }
        else if (messageText.startsWith("/price "))
        {
            handlePriceCommand(chatId, messageText);
        }
        else if (messageText.startsWith("/remove "))
        {
            handleRemoveCommand(chatId, messageText);
        }
        else if (messageText.equals("/list"))
        {
            handleListCommand(chatId);
        }
        else
        {
            sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–º–æ—â–∏.");
        }
    }

    private void sendConfirmation(long chatId, long messageId, String text)
    {
        if (messageId == 0)
        {
            sendMessage(chatId, text);
        }
        else
        {
            EditMessageText editMessage = new EditMessageText();
            editMessage.setChatId(String.valueOf(chatId));
            editMessage.setMessageId((int) messageId);
            editMessage.setText(text);
            try
            {
                execute(editMessage);
            }
            catch (TelegramApiException e)
            {
                e.printStackTrace();
            }
        }
    }

    private InlineKeyboardMarkup generateGenericKeyboard(long chatId, Map<Long, Set<String>> storage,
                                                         String callbackPrefix, String buttonTextSuffix)
    {
        Set<String> selected = storage.get(chatId);
        if (selected == null)
        {
            selected = new HashSet<>();
            storage.put(chatId, selected);
        }

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª—é—Ç—ã –ø–æ 3 –≤ —Ä—è–¥
        for (int i = 0; i < POPULAR_CURRENCIES.size(); i++)
        {
            String symbol = POPULAR_CURRENCIES.get(i);
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(symbol + (selected.contains(symbol) ? buttonTextSuffix : ""));
            button.setCallbackData(callbackPrefix + symbol);

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
            if (rows.isEmpty() || rows.get(rows.size() - 1).size() >= 3)
            {
                rows.add(new ArrayList<>());
            }
            rows.get(rows.size() - 1).add(button);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
        addCommonButtons(rows, callbackPrefix);

        markup.setKeyboard(rows);
        return markup;
    }

    private void addCommonButtons(List<List<InlineKeyboardButton>> rows, String callbackPrefix)
    {
        // –ö–Ω–æ–ø–∫–∞ "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é" (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞)
        InlineKeyboardButton manualButton = new InlineKeyboardButton();
        manualButton.setText("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é");
        manualButton.setCallbackData("manual");
        rows.add(Collections.singletonList(manualButton));

        // –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä" (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞)
        InlineKeyboardButton doneButton = new InlineKeyboardButton();
        doneButton.setText("–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä");
        doneButton.setCallbackData("done");
        rows.add(Collections.singletonList(doneButton));
    }

    private InlineKeyboardMarkup generateCurrencyListWithPrices(long chatId)
    {
        List<String> currencies = dbHelper.getFavoriteCurrencies(chatId);
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        List<InlineKeyboardButton> row = new ArrayList<>();

        if (currencies.isEmpty())
        {
            return null;
        }

        for (int i = 0; i < currencies.size(); i++)
        {
            String currency = currencies.get(i);
            String priceText = "N/A";

            try
            {
                double price = apiService.getPrice(currency);
                priceText = String.format("$%.2f", price);
            }
            catch (Exception e)
            {
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {}", currency, e);
            }

            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(currency + " - " + priceText);
            // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π callback_data –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            button.setCallbackData("chart:" + currency);
            row.add(button);

            if (row.size() == 3)
            {
                rows.add(row);
                row = new ArrayList<>();
            }
        }

        if (!row.isEmpty())
        {
            rows.add(row);
        }

        markup.setKeyboard(rows);
        return markup;
    }

    private InlineKeyboardMarkup generateCurrencyKeyboard(long chatId)
    {
        return generateGenericKeyboard(chatId, selectedCurrencies, "currency:", " ‚úÖ");
    }

    private InlineKeyboardMarkup generatePriceKeyboard(long chatId)
    {
        Set<String> selected = priceSelectedCurrencies.get(chatId);
        if (selected == null)
        {
            selected = new HashSet<>();
            priceSelectedCurrencies.put(chatId, selected);
        }

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        List<InlineKeyboardButton> row = new ArrayList<>();

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞–ª—é—Ç—ã –ø–æ 3 –≤ —Ä—è–¥
        for (String symbol : POPULAR_CURRENCIES)
        {
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(symbol + (selected.contains(symbol) ? " ‚úÖ" : ""));
            button.setCallbackData("price_currency:" + symbol);
            row.add(button);
            if (row.size() == 3)
            {
                rows.add(row);
                row = new ArrayList<>();
            }
        }
        if (!row.isEmpty())
        {
            rows.add(row);
        }

        // –ö–Ω–æ–ø–∫–∞ "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é" (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–∞)
        InlineKeyboardButton manualButton = new InlineKeyboardButton();
        manualButton.setText("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é");
        manualButton.setCallbackData("price_manual");
        rows.add(Collections.singletonList(manualButton));

        // –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä" (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–∞)
        InlineKeyboardButton doneButton = new InlineKeyboardButton();
        doneButton.setText("–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä");
        doneButton.setCallbackData("price_done");
        rows.add(Collections.singletonList(doneButton));

        markup.setKeyboard(rows);
        return markup;
    }

    private InlineKeyboardMarkup generateRemoveKeyboard(long chatId, List<String> currencies)
    {
        List<String> cleanCurrencies = cleanCurrencyList(currencies);
        Set<String> selected = removalSelectedCurrencies.get(chatId);
        if (selected == null)
        {
            selected = new HashSet<>();
            removalSelectedCurrencies.put(chatId, selected);
        }

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª—é—Ç—ã –ø–æ 3 –≤ —Ä—è–¥
        for (int i = 0; i < cleanCurrencies.size(); i++)
        {
            String symbol = cleanCurrencies.get(i);
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(symbol + (selected.contains(symbol) ? " ‚ùå" : ""));
            button.setCallbackData("remove_currency:" + symbol);

            if (rows.isEmpty() || rows.get(rows.size() - 1).size() >= 3)
            {
                rows.add(new ArrayList<>());
            }
            rows.get(rows.size() - 1).add(button);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä" (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
        InlineKeyboardButton doneButton = new InlineKeyboardButton();
        doneButton.setText("–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä");
        doneButton.setCallbackData("remove_done");
        rows.add(Collections.singletonList(doneButton));

        markup.setKeyboard(rows);
        return markup;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
    private List<String> cleanCurrencyList(List<String> currencies)
    {
        List<String> cleaned = new ArrayList<>();
        for (String s : currencies)
        {
            int lastColon = s.lastIndexOf(':');
            if (lastColon != -1)
            {
                s = s.substring(lastColon + 1);
            }
            cleaned.add(s);
        }
        return cleaned;
    }

    private void handleManualInput(long chatId, String currency, InputAction action)
    {
        // –ü—Ä–∏–≤–æ–¥–∏–º –≤–∞–ª—é—Ç—É –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        String normalizedCurrency = currency.toUpperCase();

        try
        {
            switch (action)
            {
                case ADD:
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∞–ª—é—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
                    if (dbHelper.isCurrencyFavorite(chatId, normalizedCurrency))
                    {
                        sendConfirmation(chatId, 0, "‚ö†Ô∏è –í–∞–ª—é—Ç–∞ " + normalizedCurrency + " —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!");
                    }
                    else if (apiService.isCurrencyValid(normalizedCurrency))
                    {
                        dbHelper.addCurrency(chatId, normalizedCurrency);
                        sendConfirmation(chatId, 0, "‚úÖ –í–∞–ª—é—Ç–∞ " + normalizedCurrency + " —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!");
                    }
                    else
                    {
                        sendConfirmation(chatId, 0, "‚ùå –í–∞–ª—é—Ç–∞ " + normalizedCurrency + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞.");
                    }
                    break;

                case REMOVE:
                    if (dbHelper.isCurrencyFavorite(chatId, normalizedCurrency))
                    {
                        dbHelper.removeCurrency(chatId, normalizedCurrency);
                        sendConfirmation(chatId, 0, "‚ùå –í–∞–ª—é—Ç–∞ " + normalizedCurrency + " —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!");
                    }
                    else
                    {
                        sendConfirmation(chatId, 0, "‚ö†Ô∏è –í–∞–ª—é—Ç–∞ " + normalizedCurrency + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º");
                    }
                    break;

                case PRICE:
                    double price = apiService.getPrice(normalizedCurrency);
                    sendMessage(chatId, "–ö—É—Ä—Å " + normalizedCurrency + ": $" + String.format("%.2f", price));
                    break;
            }
        }
        catch (Exception e)
        {
            switch (action)
            {
                case ADD:
                    sendConfirmation(chatId, 0, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞–ª—é—Ç—ã: " + e.getMessage());
                    break;
                case REMOVE:
                    sendConfirmation(chatId, 0, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã: " + e.getMessage());
                    break;
                case PRICE:
                    sendMessage(chatId, "–û—à–∏–±–∫–∞: –≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                    break;
            }
        }
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –∫–æ–Ω—Ü–µ
        sendMainMenu(chatId);
    }

    private void handleCustomIntervalInput(long chatId, String input)
    {
        try
        {
            int minutes = Integer.parseInt(input.trim());

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            if (minutes < MIN_NOTIFICATION_INTERVAL)
            {
                sendMessage(chatId,
                        "‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ " + MIN_NOTIFICATION_INTERVAL + " –º–∏–Ω—É—Ç.\n" +
                                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
                return;
            }

            // –ù–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å 5
            if (minutes % 5 != 0)
            {
                sendMessage(chatId,
                        "‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–µ–Ω 5 –º–∏–Ω—É—Ç–∞–º.\n" +
                                "–î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 5, 10, 15, 20, ...\n" +
                                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
                return;
            }

            String currency = notificationSettings.get(chatId);
            if (currency == null)
            {
                sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞");
                userStates.remove(chatId);
                return;
            }

            dbHelper.addNotificationSetting(chatId, currency, minutes);

            sendMessage(chatId,
                    "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è " + currency +
                            " —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –∫–∞–∂–¥—ã–µ " + minutes + " –º–∏–Ω—É—Ç\n\n" +
                            "–°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ " + minutes + " –º–∏–Ω—É—Ç");

            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            notificationSettings.remove(chatId);
            userStates.remove(chatId);

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            sendNotificationMenu(chatId);
        }
        catch (NumberFormatException e)
        {
            sendMessage(chatId,
                    "‚ùå –û—à–∏–±–∫–∞: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç).\n" +
                            "–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–æ 5 (–ø—Ä–∏–º–µ—Ä—ã: 5, 10, 15)\n" +
                            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: " + MIN_NOTIFICATION_INTERVAL + " –º–∏–Ω—É—Ç");
        }
    }

    private void sendMessage(long chatId, String text)
    {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        try
        {
            execute(message);
        }
        catch (TelegramApiException e)
        {
            e.printStackTrace();
        }
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
    private void handleGenericCommand(long chatId, String messageText, int prefixLength, InputAction action)
    {
        String currency = messageText.substring(prefixLength).trim().toUpperCase();
        handleManualInput(chatId, currency, action);
    }

    private void handlePriceCommand(long chatId, String messageText)
    {
        handleGenericCommand(chatId, messageText, 7, InputAction.PRICE);
    }

    private void handleRemoveCommand(long chatId, String messageText)
    {
        handleGenericCommand(chatId, messageText, 8, InputAction.REMOVE);
    }

    private void handleListCommand(long chatId)
    {
        List<String> currencies = dbHelper.getFavoriteCurrencies(chatId);

        if (currencies.isEmpty())
        {
            sendMessage(chatId, "–í–∞—à —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç –ø—É—Å—Ç");
            sendMainMenu(chatId);
            return;
        }

        try
        {
            InlineKeyboardMarkup markup = generateCurrencyListWithPrices(chatId);

            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(chatId));
            message.setText("–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã —Å —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏:");
            message.setReplyMarkup(markup);

            execute(message);
            sendMainMenu(chatId); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–ø–∏—Å–∫–∞
        }
        catch (TelegramApiException e)
        {
            e.printStackTrace();
            sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: " + e.getMessage());
            sendMainMenu(chatId);
        }
    }

    private void checkNotifications()
    {
        long currentTimeSeconds = System.currentTimeMillis() / 1000; // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {}", new Date(currentTimeSeconds * 1000));

        try
        {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
            Set<Long> allUserIds = getAllUserIdsWithNotifications();

            for (Long userId : allUserIds)
            {
                List<DatabaseHelper.NotificationSetting> settings = dbHelper.getNotificationSettings(userId);
                logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {} –Ω–∞—Å—Ç—Ä–æ–µ–∫", userId, settings.size());

                for (DatabaseHelper.NotificationSetting setting : settings)
                {
                    try
                    {
                        if (shouldSendNotification(userId, setting, currentTimeSeconds))
                        {
                            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {} ({}): –∏–Ω—Ç–µ—Ä–≤–∞–ª {} –º–∏–Ω—É—Ç",
                                    userId, setting.getCurrency(), setting.getIntervalMinutes());

                            sendNotification(userId, setting);
                            updateLastNotificationTime(userId, setting.getCurrency());
                        }
                    }
                    catch (Exception e)
                    {
                        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –∏ –≤–∞–ª—é—Ç—ã {}",
                                userId, setting.getCurrency(), e);
                    }
                }
            }
        }
        catch (Exception e)
        {
            logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", e);
        }
    }

    private Set<Long> getAllUserIdsWithNotifications()
    {
        Set<Long> userIds = new HashSet<>();
        try (Connection conn = DriverManager.getConnection(DatabaseHelper.DB_URL);
             PreparedStatement stmt = conn.prepareStatement("SELECT DISTINCT user_id FROM notifications");
             ResultSet rs = stmt.executeQuery())
        {

            while (rs.next())
            {
                userIds.add(rs.getLong("user_id"));
            }
        }
        catch (SQLException e)
        {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏", e);
        }
        return userIds;
    }

    private boolean shouldSendNotification(long userId, DatabaseHelper.NotificationSetting setting, long currentTimeSeconds)
    {
        try (Connection conn = DriverManager.getConnection(DatabaseHelper.DB_URL);
             PreparedStatement stmt = conn.prepareStatement(
                     "SELECT last_notification FROM notifications WHERE user_id = ? AND currency = ?"))
        {

            stmt.setLong(1, userId);
            stmt.setString(2, setting.getCurrency());
            ResultSet rs = stmt.executeQuery();

            if (rs.next())
            {
                long lastNotification = rs.getLong("last_notification");
                long intervalSeconds = setting.getIntervalMinutes() * 60L;

                logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è {}: —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è {}, –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {}, –∏–Ω—Ç–µ—Ä–≤–∞–ª {} —Å–µ–∫—É–Ω–¥",
                        setting.getCurrency(), currentTimeSeconds, lastNotification, intervalSeconds);

                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å –≤—Ä–µ–º–µ–Ω–∏ (5 —Å–µ–∫—É–Ω–¥) –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                return (currentTimeSeconds - lastNotification) >= intervalSeconds - 5;
            }
        }
        catch (SQLException e)
        {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {}",
                    setting.getCurrency(), e);
        }
        return false;
    }

    private void updateLastNotificationTime(long chatId, String currency)
    {
        try (PreparedStatement stmt = dbHelper.getConnection().prepareStatement(
                "UPDATE notifications SET last_notification = strftime('%s', 'now') " +
                        "WHERE user_id = ? AND currency = ?"))
        {
            stmt.setLong(1, chatId);
            stmt.setString(2, currency);
            stmt.executeUpdate();
        }
        catch (SQLException e)
        {
            e.printStackTrace();
        }
    }

    private void sendNotification(long chatId, DatabaseHelper.NotificationSetting setting)
    {
        try
        {
            double price = apiService.getPrice(setting.getCurrency());
            String formattedPrice = String.format("%.2f", price);

            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(chatId));
            message.setText("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: " + setting.getCurrency() +
                    " —Å–µ–π—á–∞—Å —Å—Ç–æ–∏—Ç $" + formattedPrice);
            message.setParseMode("HTML");

            execute(message);

            logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {}: {} = ${}",
                    chatId, setting.getCurrency(), formattedPrice);
        }
        catch (Exception e)
        {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {}",
                    setting.getCurrency(), e);

            try
            {
                SendMessage message = new SendMessage();
                message.setChatId(String.valueOf(chatId));
                message.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è " + setting.getCurrency() +
                        ". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                execute(message);
            }
            catch (Exception ex)
            {
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ", ex);
            }
        }
    }

    private void sendCurrencyChart(long chatId, String currency)
    {
        try
        {
            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ 30 –¥–Ω–µ–π
            List<CryptoApiService.HistoricalData> history = apiService.getHistoricalData(currency, "day", 30);

            if (history == null || history.isEmpty())
            {
                sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞");
                return;
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            List<String> labels = new ArrayList<>();
            List<Double> prices = new ArrayList<>();

            for (CryptoApiService.HistoricalData data : history)
            {
                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É (–¥–µ–Ω—å.–º–µ—Å—è—Ü)
                SimpleDateFormat sdf = new SimpleDateFormat("dd.MM");
                String dateStr = sdf.format(new Date(data.getTimestamp() * 1000));
                labels.add(dateStr);
                prices.add(data.getPrice());
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è QuickChart
            String chartUrl = generateQuickChartUrl(currency, labels, prices);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            SendPhoto photo = new SendPhoto();
            photo.setChatId(String.valueOf(chatId));
            photo.setPhoto(new InputFile(chartUrl));
            photo.setCaption("–ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ " + currency + " –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π");

            try
            {
                execute(photo);
            }
            catch (TelegramApiException e)
            {
                sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: " + e.getMessage());
            }

        }
        catch (Exception e)
        {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {}", currency, e);
            sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: " + e.getMessage());
        }
    }

    private String generateQuickChartUrl(String currency, List<String> labels, List<Double> prices)
    {
        // –§–æ—Ä–º–∏—Ä—É–µ–º JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞
        String config = String.format(
                "{type:'line',data:{labels:%s,datasets:[{label:'%s/USD',data:%s," +
                        "borderColor:'#36A2EB',backgroundColor:'rgba(54,162,235,0.1)',fill:true}]}, " +
                        "options:{responsive:true,maintainAspectRatio:false,scales:{y:{beginAtZero:false}}}}",
                new Gson().toJson(labels),
                currency,
                new Gson().toJson(prices)
        );

        // –ö–æ–¥–∏—Ä—É–µ–º JSON –¥–ª—è URL
        return "https://quickchart.io/chart?c=" + URLEncoder.encode(config, StandardCharsets.UTF_8);
    }

    @Override
    public String getBotUsername()
    {
        return "crypto_monitor666_bot";
    }

    @Override
    public String getBotToken()
    {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        String token = System.getenv("BOT_TOKEN");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
        if (token == null || token.isEmpty())
        {
            throw new IllegalStateException(
                    "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n" +
                            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ IDE:\n" +
                            "–ü—Ä–∏–º–µ—Ä –¥–ª—è Windows: setx BOT_TOKEN \"–≤–∞—à_—Ç–æ–∫–µ–Ω\"\n" +
                            "–ü—Ä–∏–º–µ—Ä –¥–ª—è Linux/macOS: export BOT_TOKEN=\"–≤–∞—à_—Ç–æ–∫–µ–Ω\""
            );
        }

        return token;
    }
}